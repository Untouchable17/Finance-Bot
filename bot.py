import re
import pandas

from aiogram import types, executor
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.types import (
	ReplyKeyboardMarkup, 
	ReplyKeyboardRemove, 
	InlineKeyboardButton, 
	InlineKeyboardMarkup
)

import utils
from config import *
from callbacks import *
from database import db_executor



def restricted_access(user_id):
	def has_permission(func):
		async def wrapper(message: types.Message):
			if message.from_user.id == user_id:
				return await func(message)
		return wrapper
	return has_permission


@dp.message_handler(commands=['start', 'help', 'commands'])
async def start_command_handler(message: types.Message):

	text = """
	
–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'price comment'. –ü–µ—Ä–≤—ã–º
—É–∫–∞–∑—ã–≤–∞–µ—Ç–µ —Ü–µ–Ω—É –∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –ù–∞–ø—Ä–∏–º–µ—Ä

- <b>850 —à–∞–≤–µ—Ä–º–∞ —Å –∫–æ–ª–æ–π</b>

<b>–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:
/stats - –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∞—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
/category [name] - –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∞—Ç –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–º–µ—Å—Ç–µ —Å —Å–∞–º–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏
/clear - –æ—á–∏—Å—Ç–∫–∞ –∑–∞–ø–∏—Å–µ–π –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
/export - —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ xlsx —Ñ–∞–π–ª
/commands - –≤—ã–≤–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
</b>

	""".strip("")
	await message.answer(text)


@dp.message_handler(commands=['stats'], commands_prefix='/')
@restricted_access(user_id=USER_ID)
async def stats_handler(message: types.Message):

	get_statistic = db_executor.get_statistics_from_db()
	await message.reply("–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∞—Ç –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
	result = utils.format_statistic_records(get_statistic)
	await message.answer(result)


@dp.message_handler(commands=['clear'], commands_prefix='/')
@restricted_access(user_id=USER_ID)
async def delete_transactions_handler(message: types.Message):

    categories = db_executor.get_categories_from_db()

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*[category[1] for category in categories])
    keyboard.add(HIDE_KEYBOARD_BTN)
    await message.reply("<b>‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∑–∞–ø–∏—Å–∏ –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:</b>", reply_markup=keyboard)

    await Form.waiting_for_clear_category.set()


@dp.message_handler(commands=['export'], commands_prefix='/')
@restricted_access(user_id=USER_ID)
async def export_handler(message: types.Message):

	data = db_executor.get_export_db_data()

	if not data:
		await message.answer("<b>‚ö†Ô∏è –ë–∞–∑–∞ –ø—É—Å—Ç–∞—è. –î–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ—Ç</b>")
	else:
		await message.answer("<b>ü™Ñ –ù–∞—á–∏–Ω–∞—é —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ..</b>")
		
		df = pandas.DataFrame(
			data, columns=['Id', 'Amount', 'Category', 'Comment', 'Date']
		)

		with pandas.ExcelWriter('finance_data.xlsx') as writer:
			df.to_excel(writer, index=False)

		with open('finance_data.xlsx', 'rb') as file:
			await message.answer_document(file)


@dp.message_handler(lambda message: message.from_user.id == int(USER_ID), state=Form.waiting_for_clear_category)
async def process_clear_category(message: types.Message, state: FSMContext):
	category_name = message.text

	if category_name == HIDE_KEYBOARD_BTN.text:
		await bot.send_message(message.chat.id, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞.", reply_markup=ReplyKeyboardRemove())
		await state.finish()
		return None
	else:
		keyboard = InlineKeyboardMarkup()
		yes_button = InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"clear_category:{category_name}")
		no_button = InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="clear_category_cancel")
		keyboard.add(yes_button, no_button)
		await message.answer(f"<b>‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_name} ?</b>", reply_markup=keyboard)
		await state.update_data(category=category_name)


@dp.message_handler(commands=['category'], commands_prefix='/', state=None)
@restricted_access(user_id=USER_ID)
async def stats_category_handler(message: types.Message):
	
	category_name = ""
	try:	
		category_name = message.text.split()[1]
	except:
		await message.answer("‚ö†Ô∏è <b>–î–ª—è –∫–æ–º–∞–Ω–¥—ã /category –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–±–µ–ª–∞</b>")
		return None
	
	records = db_executor.get_records_by_category_from_db(category_name)

	if not records:
		await message.answer(f"‚ö†Ô∏è <b>–ó–∞–ø–∏—Å–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>")
		return None

	if len(records) > RECORDS_PER_PAGE:
		current_page = 0
		total_pages = len(records) // RECORDS_PER_PAGE
		if len(records) % RECORDS_PER_PAGE:
			total_pages += 1

		keyboard = InlineKeyboardMarkup(row_width=2)
		previous_btn = InlineKeyboardButton(
			'‚è™ –ü—Ä–µ–¥—ã–¥—É—â–∞—è', 
			callback_data=f'prev::{category_name}::{current_page}::{total_pages}'
		)
		next_btn = InlineKeyboardButton(
			'‚è© –°–ª–µ–¥—É—é—â–∞—è',
			callback_data=f'next::{category_name}::{current_page}::{total_pages}'
		)
		hide_btn = InlineKeyboardButton('–°–∫—Ä—ã—Ç—å', callback_data="hide_keyboard")
		keyboard.add(previous_btn, next_btn, hide_btn)

		records_text = utils.format_records(records[:RECORDS_PER_PAGE])
		await message.reply(records_text, reply_markup=keyboard)

	else:
		records_text = utils.format_records(records)
		await message.reply(records_text)
        

@dp.message_handler(lambda message: message.from_user.id == int(USER_ID), ~Text(HIDE_KEYBOARD_BTN.text), state=None)
async def add_expense_handler(message: types.Message, state: FSMContext):
    
    text = message.text.strip()
    match = re.match(r'^(\d+(?:\.\d+)?)\s+(.+)$', text)
    if not match:
        await message.reply(
			"<b>‚õîÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <b>\"—Ü–µ–Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π\"</b>. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
		)
        return None

    price = float(match.group(1))
    comment = match.group(2)

    async with state.proxy() as data:
        data['price'] = price
        data['comment'] = comment

    categories = db_executor.get_categories_from_db()

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*[category[1] for category in categories])
    keyboard.add(HIDE_KEYBOARD_BTN)
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)

    await Form.waiting_for_category.set()


@dp.message_handler(lambda message: message.from_user.id == int(USER_ID), state=Form.waiting_for_category)
async def process_category(message: types.Message, state: FSMContext):

	category_name = message.text
	async with state.proxy() as data:
		price = data['price']
		comment = data['comment']
		status = db_executor.save_finance_record(
			price=price, comment=comment, category_name=category_name
		)

	async with state.proxy() as data:
		data['category'] = category_name

	hide_keyboard = ReplyKeyboardRemove()
	inline_kb = InlineKeyboardMarkup()
	inline_kb.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é", callback_data="cancel"))
	inline_kb.add(InlineKeyboardButton("–°–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É", callback_data="hide_keyboard"))

	if status is not None:
		await message.answer(
			"<b>‚õîÔ∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>", reply_markup=hide_keyboard
		)
	else:
		formatted_date = utils.transform_datetime(message["date"])
		await message.reply(
			f"‚úÖ –í–Ω–µ—Å–µ–Ω–æ <b>{float(price):,.2f} ‚ÇΩ</b>\nüí¨ {comment}\nüóì {formatted_date[0]} {formatted_date[1]} \n\nüóÉ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category_name}</b>",
			reply_markup=inline_kb,
		)
		
	await state.finish()


@dp.message_handler(lambda message: message.from_user.id == int(USER_ID) and message.text == HIDE_KEYBOARD_BTN.text)
async def hide_keyboard_handler(message: types.Message, state: FSMContext):

	hide_keyboard = ReplyKeyboardRemove()
	await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–∫—Ä—ã—Ç—ã", reply_markup=hide_keyboard, )
	await state.finish()


if __name__ == "__main__":
	executor.start_polling(dp, skip_updates=True)